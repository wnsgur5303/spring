앞으로 테스트 코드 작성방법

controller => 1. webTestConfig 클래스를 상속 받는 junit 클래스를 생성
				2. mockMvc 객체를 이용하여 테스트 코드 작성
				
service, re퍼지토리 ==> 1.modelTestconfig 클래스를 상속받는 제이유닛 클래스를 생성
2. 테스트 대상 스프링 빈을 주입받아 테스트 코드 작성

실습

로그인 기능 마이그레이션 jsp/servlet ==> spring

1.로그인 화면 요청
.jsp 위치 (webapp/... => webapp/WEB-INF/views)
		commons/header.jsp, left.jsp, common_lib.jsp)
		
		webapp/login.jsp ==> webapp/WEB-INF/views/logins.jsp
				webapp/common/*.jsp ==> webapp /views/ common / *.jsp
				
				

login 화면 요청 처리 컨트롤러 스프링 작업
1.kr.or.ddit.login.로그인 컨트롤러 생성
2.Controller 등록
3.@RequestMapping ==>class? method?

	기존 : @WebServlet("loginController")
	변경 : login/view ==> localhost/login/view

4. method 구현
	해당 요청을 처리하기 위해 파라미터가 필요한가?? --> 필요없음
	
	요청 위임(servlet)
	req.getRequestDispatcher("login.jsp").forward(req,resp);
	
	요청 위임(spring)
	메소드 반환 문자열 (view name)
		/WEB-INF/views/ + 메소드 반환 뷰네임 + .jsp
		/WEB-INF/views/login.jsp

5.테스트 코드 구현
controller 테스트 코드 쿠현시 사용하는 메소드
	.perform
		get(),post(),fileUpload()
		param('파라미터명',"파라미터값")
		
	.andExpect
		staus(), model(), view()
		
	.andReturn() ==> MvcResult 객체를 반환
					ModelAndView mav = mvcResult.getModelAndView();
					
	.andDo ==> 부가적인 작업(결과 출력);
		
파라미터가 있는 스프링 컨트롤러

LoginController : 로그인 요청 처리 메소드 개발

1. userVo 준비(작성안한 필드 추가)
2. webapp/main.jsp ==> webapp/WEB-INF/views/main.jsp 로 복사
3. 로그인 처리 로직 작성(메소드)
	3-1 파라미터 작업
	기존 request.getParameter("userid")
	==> 1.파라미터가 몇개 없어서 value object를 사용하지않는 경우
		스프링 컨트롤러 메소드에 파라미터와 동일한 이름의 인자를 선언
		스프링 mvc 모듈에서 request 객체의 파라미터를 메소드 인자로 자동 바인딩 한다
		2.파라미터를 담을 value object가 있는 경우
			value object를 스프링 메소드 인자로 선언
			파라미터 이름과 value object의 필드의 이름이 동일한 경우 자동으로 바인딩
	
	3-2 로그인 성공시
		세션객체에 S_USER 속성으로 사용자 정보를 vo 객체를 저장
		
		기존 : HttpSession = request.getSession();
			session.setAttribute("S_USER",userVo);
			==>스프링 컨트롤러 메소드에 추가할 수 있는 인자 타입
			servlet api : HttpServletRequest, HttpServletResponse, HttpSession
						application ==> getServletContext()?
	
	3-3. 로그인 실패시
		login.jsp로 리다이렉트
		
		기존: response.sendRedirect("/login.jsp");
		==> spring 에서는 컨트롤러 메소드가 viewName 을 반환하게 되어있음
		redirect에 대한 viewName : "redirect:" + 리다이렉트 주소
		
스프링 컨트롤러 메소드 인자    에 대한 정리
1.servlet Api -> 3개
2.value object -> spring Command 객체/ form 객체 : form전송을 통해 보내진 파라미터를 받는 객체
 prmitive type, 개별 객체(String, Date)
 
 2.5 ErrorBindingResult : validation 검증식 에러 메시지를 저장
 						***** 규칙 (순서가 존재한다.)
 						해당 value 객체 다음에 이어서 메소드 인자로 선언 해야한다.
 						public String process(UserVo userVo, binding객체) o
 						public String process(UserVo userVo, HttpSession session, binding 객체) x
 
 
3.model - 속성 담을 때 (request scope)
-여기까지가 잘 쓰이는거고 -
		
4.Reader/Writer , Input/OutputStream
servlet에서 html 응답 생성 : Writer
파일 다운로드 응답 : OutputStream

사용자 요청 정보(파일 업로드) : InputStream
----
5.redirectAttribute : 리다이렉트 페이지에 1회성 속성 전달
	request.setAttribute("msg","에러발생");
	response.sendRedirect("리다이렉트.jsp");
	
	리다이렉트.jsp 에서 msg속성 조회??
---

스프링 컨트롤러 메소드 반환 타입
1. String : viewName
2. ModelAndView : 모델과 뷰 객체가 합쳐진 객체 ()
3. view 객체
4. void : response 객체나 , outstream을 통해 개발자가 직접 응답 생성한 경우
	->파일다운로드
	
스프링 컨트롤러에서 사용 가능한 어노테이션

@RequestMapping
@RequestMapping("url") ==> path @RequestMapping(path="url")

1.path 

2.HTTP메소드 제한

3.파라미터 제한 : params
	특정 파라미터의 값이 정해진 값과 일치 할때만 해당 요청을 처리
	param = {"userid = brown"} 여러개도 되는듯


AJAX :	
4.요청 content-type 제한 : consumes
	consumes = "application/json" ==> 요청을 json 문자열로 보냈을 때만 처리
	
5.응답 허용 content-type, ACCEPT 제한 : json 요청, xml 요청
	produces="application/json"

6. 특정 헤더 제한 :
		headers="Content-Type = text/plain"
		

		
	Spring - mybatis 연동을 하려고 한다.
예전 
	MybatisUtil, getSqlSession()

spring 
	sqlSession 객체에 해당하는 sqlSessionTemplate 객체를 dao객체에 주입받아서 사용
	sqlSessionTemplate ==> SqlSessionFactoryBean => 1. 설정파일(매퍼파일), 2.Datasource 객체 만들기
	//이렇게 해놓으면 장점 -트랜젝션을 우리가 제어를 안함 아직 건들 단계 아님
	
	

	
	
	
	--
	
	
	
	사용자 전체 리스트 개발 URL : user/allUser
1.spring controller 생성 : kr.or.ddit.user.web.UserController
2.필요한 스프링 번 : userService
	**조회한 사용자 리스트 정보 model 객체에 담기
3.webapp/user/allUser.jsp ==> webapp/WEB-INF/views/user/allUser.jsp
*.UserControllerTest 생성, allUser메소드 테스트
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- UserDao, userService -->
	<!-- bean : 스프링 번을 선언할 때 사용 id: 스프링 컨테이너에서 관리할 때 사용할 스프링 번의 이름 - 중복이 되면 
		안된다 class : 해당 스프링 번을 생성하기 위한 구현체 클래스 full name -->


	<bean id="userDao" class="kr.or.ddit.user.repository.UserDaoImpl" />


	<!-- 스프링 번 선언 userDaoImpl userDao = new UserDaoImpl(); -->
	<!-- UserService userService = new UserServiceImpl(); UserServcie.getUser("brown") 
		==>에러 property == filed, setter value : 문자열, 숫자 ref : 다른 스프링 번, 주입 받고 싶은 
		스프링 빈 이름을 기술 property 엘레먼트를 이용하여 다른 스프링 번을 (DI-Dependency Injection)주입 UserService 
		userSErvice = new UserServiceImpl(); userService.setUserDao(userDao); -->

	<bean id="userService"
		class="kr.or.ddit.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>


	<!-- 생성자 주입 -->

	<bean id="userServiceCons"
		class="kr.or.ddit.user.service.UserServiceImpl">
		<constructor-arg ref="userDao"></constructor-arg>
	</bean>


	<bean id="userServicePrototype"
		class="kr.or.ddit.user.service.UserServiceImpl" scope="prototype">
		<property name="userDao" ref="userDao"></property>
	</bean>

	<!-- list,set, map컬렉션 객체를 스프링 번으로 등록 -->
	<bean id="collectionBean" class="kr.or.ddit.ioc.CollectionBean">
		<property name="list">
			<list>
				<value>brown</value>
				<value>sally</value>
				<value>cony</value>
			</list>
		</property>

		<property name="map">
			<map>
				<entry key="userid" value="brown"></entry>
				<entry key="usernm" value="브라운"></entry>
			</map>
		</property>

		<property name="set">
			<set>
				<value>brown</value><value>sally</value><value>cony</value>
			</set>
		</property>

		<property name="properties">
			<props>
				<prop key="userid">brown</prop>
				<prop key="usernm">브라운</prop>
			</props>
		</property>

	</bean>
<!-- 	system-properties-mode="NEVER" -->
	<!--  properties 파일의 값을 스프링 빈의 값으로 주입하기 -->
	<!-- properties-placeholder는 설정한 파일의 값만 로딩하는 것이 아니라 os의 환경변수도 같이 로딩한다 
		dbinfo.properties에 선언한 username 속성은 os의 사용자 이름에 해당하는 환경변수와 겹친다
		property-placeholder 의 system-properties-mode 속성을 "NABER"로 설정한 경우
		system property는 로딩하지 않고 location에 지정한 파일에서만 속성을 로딩한다.
		
		-->
	<context:property-placeholder location="classpath:/kr/or/ddit/config/db/dbinfo.properties"/>
	<bean id="dbConfig" class="kr.or.ddit.ioc.DbConfig">
	<property name="driverClassName" value="${jdbc.driverClassName}"></property>
	<property name="url" value="${jdbc.url}"></property>
	<property name="username" value="${jdbc.username}"></property>
	<property name="password" value="${jdbc.password}"></property>

	</bean>
	
	
</beans>
